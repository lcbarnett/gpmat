function gp = gp_open(name,term,scale,fs)

global gp_gnuplot gp_defterm gp_imviewer gp_epsviewer gp_pdfviewer gp_svgviewer gp_eps2pdf gp_imconv gp_pdf2svg gp_pdfcrop gp_pdftoeps gp_pdflatex;

if nargin < 1 || isempty(name)
	name = [tempdir filesep 'gplot'];
	fprintf(2,'WARNING: no plot file name specified - defaulting to ''%s''\n',name);
end

if nargin < 2 || isempty(term)
    term = gp_defterm;
end

term = lower(term);
xterm = isequal(term([1 2]),'x-'); % based on 'epslatex'  : eps, pdf, svg

% Different terminals use different units...

global gp_screensize
assert(~isempty(gp_screensize),'Haven''t got screen size! (Did you run gpmat''s ''startup.m''?)');
if xterm
	screensize = gp_screensize.pixels./gp_screensize.dpi; % inches
else
	switch term
		case {'x11', 'png','svg', 'wxt', 'qt'  }, screensize = gp_screensize.pixels;
		case {'eps', 'pdf','pdfc','pdfx','pdfp'}, screensize = gp_screensize.pixels./gp_screensize.dpi; % inches
		otherwise, error('Bad terminal specification');
	end
end

darat = 4/3;  % default x/y aspect ratio
dfsch = 1/2;  % default fraction of screen height
xsadj = 0.97; % leave a little space for desktop furniture
ysadj = 0.94; % leave a little space for desktop furniture

xscreen  = xsadj*screensize(1); % plot window max screen width
yscreen  = ysadj*screensize(2); % plot window max screen height
dyscreen = dfsch*screensize(2); % plot window default screen height

if nargin < 3 || isempty(scale), scale = 1; end

assert(isnumeric(scale) && isvector(scale),'scale must be a scalar or 2-vector');

% Plot scaling:
%
% scale(1) is the plot scaling factor, and scale(2) the horizontal/vertical
% aspect ratio (if 'scale' is a scalar, then the aspect ratio is set to the
% default value 'darat'). Vertical plot size is set to the default 'dyscreen'
% scaled by scale(1). The aspect ratio scale(2) is then applied to obtain the
% horizontal plot size.
%
% Special cases: if scale(1) == Inf; then the vertical plot size is set to the
% maximum that will fit vertically on screen, and the aspect ratio scale(2) is
% applied as before. If scale(2) == Inf; then the horizontal size is set to
% the maximum that will fit horizontally on screen. If bothe scale(1) and scale(2)
% are == Inf, then both width and height are set to the maximum that will fit on
% screen. Note: the "maximum" screen width and height are slightly shrunken to
% accommodate desktop furniture (e.g. taskbars, etc.)

if length(scale) == 1
	scale(2) = darat;
end

if isinf(scale(1))
	ysize = yscreen;
else
	ysize = scale(1)*dyscreen;
end

if isinf(scale(2))
	xsize = xscreen;
else
	xsize = scale(2)*ysize;
end

if xsize >  xscreen
	fprintf(2,'WARNING: plot bigger than screen horizontally - adjusting!\n');
	xsize = xscreen;
end

if ysize > yscreen
	fprintf(2,'WARNING: plot bigger than screen vertically - adjusting!\n');
	ysize = yscreen;
end

if nargin < 4 || isempty(fs)
    fs = 12;
end

[gp,emsg] = fopen([name '.gp'],'w+t');
assert(gp ~= -1,'failed to open Gnuplot script file ''%'': %s',[name '.gp'],emsg);

[~,fname,fext] = fileparts(name);
fname = strrep([fname fext],'.','_'); % dots in filenames tend to bork stuff; best avoided

fprintf(gp,'################################## Generated by ''gpmat'' ##################################\n\n');

if     xterm
	fprintf(gp,'set term epslatex standalone color solid size %f,%f %d\n\n',xsize,ysize,fs);
    fprintf(gp,'FNAME = "%s"\n\n',fname);
    fprintf(gp,'set out FNAME.".tex"\n\n');
else
	switch term
	case 'x11'
		fprintf(gp,'set term x11 enhanced solid persist size %d,%d\n\n',round(xsize),round(ysize));
	case 'wxt'
		fprintf(gp,'set term wxt size %d,%d enhanced font "Times,%d" persist\n\n',round(xsize),round(ysize),fs);
	case 'qt'
		fprintf(gp,'set term qt size %d,%d enhanced font "Times,%d" persist\n\n',round(xsize),round(ysize),fs);
	case 'png'
		fprintf(gp,'set term png font "Times,%d" size %d,%d enhanced\n',fs,round(xsize),round(ysize));
		fprintf(gp,'pngfile = "%s.png"\n',fname);
		fprintf(gp,'set out pngfile\n\n');
	case 'svg'
	%	fprintf(gp,'set term svg size %d,%d dynamic mouse standalone font "Times,%d" enhanced\n',round(xsize),round(ysize),fs);
		fprintf(gp,'set term svg size %d,%d dynamic font "Times,%d" enhanced\n',round(xsize),round(ysize),fs);
		fprintf(gp,'svgfile = "%s.svg"\n',fname);
		fprintf(gp,'set out svgfile\n\n');
	case 'eps'
		fprintf(gp,'set term post eps enhanced color solid size %f,%f font "Times,%d"\n',xsize,ysize,2*fs);
		fprintf(gp,'epsfile = "%s.eps"\n',fname);
		fprintf(gp,'set out epsfile\n\n');
	case 'pdf'
		fprintf(gp,'set term post eps enhanced color solid size %f,%f font "Times,%d"\n',xsize,ysize,2*fs);
		fprintf(gp,'epsfile = "%s.eps"\n',fname);
		fprintf(gp,'pdffile = "%s.pdf"\n',fname);
		fprintf(gp,'set out epsfile\n\n');
	case 'pdfc'
		fprintf(gp,'set term pdfcairo enhanced font "Times,%d" size %f,%f\n',1.5*fs,xsize,ysize);
		fprintf(gp,'pdffile = "%s.pdf"\n',fname);
		fprintf(gp,'set out pdffile\n\n');
	case 'pdfx'
		fprintf(gp,'set term cairolatex pdf standalone colortext color font "default,%d" size %f,%f\n\n',fs,xsize,ysize);
		fprintf(gp,'FNAME = "%s"\n\n',fname);
		fprintf(gp,'set out FNAME.".tex"\n\n');
	case 'pdfp'
		fprintf(gp,'set term cairolatex png standalone colortext color font "default,%d" size %f,%f resolution 96\n\n',fs,xsize,ysize);
		fprintf(gp,'FNAME = "%s"\n\n',fname);
		fprintf(gp,'set out FNAME.".tex"\n\n');
	case ''
		% do nothing %
	otherwise
		error('gp_plot: unknown terminal type');
	end
end

fprintf(gp,'##########################################################################################\n\n');
